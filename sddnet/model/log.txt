======================================== Model Structures ========================================
DN_Net(
  (encoder): ModuleList(
    (0): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(1, 64, kernel_size=(5, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (1): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (2): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (3): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (4): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
  )
  (decoder): ModuleList(
    (0): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (1): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (2): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (3): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (4): Sequential(
      (0): ConvTranspose2d(64, 5, kernel_size=(5, 2), stride=(2, 1))
      (1): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=5)
    )
  )
  (tcmlayer): ModuleList(
    (0): TcmBlocks(
      (TCMBlocks): ModuleList(
        (0): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (1): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (2): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (3): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (4): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (5): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
      )
    )
    (1): TcmBlocks(
      (TCMBlocks): ModuleList(
        (0): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (1): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (2): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (3): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (4): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (5): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
      )
    )
    (2): TcmBlocks(
      (TCMBlocks): ModuleList(
        (0): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (1): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (2): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (3): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (4): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (5): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
      )
    )
  )
)
==================================================================================================
======================================== Model Parameters ========================================
encoder.0.1.weight torch.Size([64, 1, 5, 2])
encoder.0.1.bias torch.Size([64])
encoder.0.2.weight torch.Size([64])
encoder.0.2.bias torch.Size([64])
encoder.0.3.weight torch.Size([64])
encoder.1.1.weight torch.Size([64, 64, 3, 2])
encoder.1.1.bias torch.Size([64])
encoder.1.2.weight torch.Size([64])
encoder.1.2.bias torch.Size([64])
encoder.1.3.weight torch.Size([64])
encoder.2.1.weight torch.Size([64, 64, 3, 2])
encoder.2.1.bias torch.Size([64])
encoder.2.2.weight torch.Size([64])
encoder.2.2.bias torch.Size([64])
encoder.2.3.weight torch.Size([64])
encoder.3.1.weight torch.Size([64, 64, 3, 2])
encoder.3.1.bias torch.Size([64])
encoder.3.2.weight torch.Size([64])
encoder.3.2.bias torch.Size([64])
encoder.3.3.weight torch.Size([64])
encoder.4.1.weight torch.Size([64, 64, 3, 2])
encoder.4.1.bias torch.Size([64])
encoder.4.2.weight torch.Size([64])
encoder.4.2.bias torch.Size([64])
encoder.4.3.weight torch.Size([64])
decoder.0.0.weight torch.Size([64, 64, 3, 2])
decoder.0.0.bias torch.Size([64])
decoder.0.1.weight torch.Size([64])
decoder.0.1.bias torch.Size([64])
decoder.0.2.weight torch.Size([64])
decoder.1.0.weight torch.Size([64, 64, 3, 2])
decoder.1.0.bias torch.Size([64])
decoder.1.1.weight torch.Size([64])
decoder.1.1.bias torch.Size([64])
decoder.1.2.weight torch.Size([64])
decoder.2.0.weight torch.Size([64, 64, 3, 2])
decoder.2.0.bias torch.Size([64])
decoder.2.1.weight torch.Size([64])
decoder.2.1.bias torch.Size([64])
decoder.2.2.weight torch.Size([64])
decoder.3.0.weight torch.Size([64, 64, 3, 2])
decoder.3.0.bias torch.Size([64])
decoder.3.1.weight torch.Size([64])
decoder.3.1.bias torch.Size([64])
decoder.3.2.weight torch.Size([64])
decoder.4.0.weight torch.Size([64, 5, 5, 2])
decoder.4.0.bias torch.Size([5])
decoder.4.1.weight torch.Size([5])
decoder.4.1.bias torch.Size([5])
decoder.4.2.weight torch.Size([5])
tcmlayer.0.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.0.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.1.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.2.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.3.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.4.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.5.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.0.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.1.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.2.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.3.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.4.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.5.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.0.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.1.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.2.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.3.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.4.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.5.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
[*] Parameter Size: 1540244
==================================================================================================
======================================== Model Structures ========================================
DN_Net(
  (encoder): ModuleList(
    (0): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(2, 64, kernel_size=(5, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (1): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (2): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (3): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
    (4): Sequential(
      (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
      (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=64)
    )
  )
  (decoder): ModuleList(
    (0): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (1): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (2): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (3): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (4): Sequential(
      (0): ConvTranspose2d(64, 5, kernel_size=(5, 2), stride=(2, 1))
      (1): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=5)
    )
  )
  (tcmlayer): ModuleList(
    (0): TcmBlocks(
      (TCMBlocks): ModuleList(
        (0): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (1): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (2): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (3): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (4): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (5): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
      )
    )
    (1): TcmBlocks(
      (TCMBlocks): ModuleList(
        (0): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (1): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (2): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (3): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (4): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (5): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
      )
    )
    (2): TcmBlocks(
      (TCMBlocks): ModuleList(
        (0): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (1): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (2): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (3): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (4): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (5): DMG_TCM(
          (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
          (primal_domain): Gated_D_Conv(
            (main_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
            )
            (gate_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
              (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              (4): Sigmoid()
            )
          )
          (out_conv): Sequential(
            (0): PReLU(num_parameters=64)
            (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
      )
    )
  )
)
==================================================================================================
======================================== Model Parameters ========================================
encoder.0.1.weight torch.Size([64, 2, 5, 2])
encoder.0.1.bias torch.Size([64])
encoder.0.2.weight torch.Size([64])
encoder.0.2.bias torch.Size([64])
encoder.0.3.weight torch.Size([64])
encoder.1.1.weight torch.Size([64, 64, 3, 2])
encoder.1.1.bias torch.Size([64])
encoder.1.2.weight torch.Size([64])
encoder.1.2.bias torch.Size([64])
encoder.1.3.weight torch.Size([64])
encoder.2.1.weight torch.Size([64, 64, 3, 2])
encoder.2.1.bias torch.Size([64])
encoder.2.2.weight torch.Size([64])
encoder.2.2.bias torch.Size([64])
encoder.2.3.weight torch.Size([64])
encoder.3.1.weight torch.Size([64, 64, 3, 2])
encoder.3.1.bias torch.Size([64])
encoder.3.2.weight torch.Size([64])
encoder.3.2.bias torch.Size([64])
encoder.3.3.weight torch.Size([64])
encoder.4.1.weight torch.Size([64, 64, 3, 2])
encoder.4.1.bias torch.Size([64])
encoder.4.2.weight torch.Size([64])
encoder.4.2.bias torch.Size([64])
encoder.4.3.weight torch.Size([64])
decoder.0.0.weight torch.Size([64, 64, 3, 2])
decoder.0.0.bias torch.Size([64])
decoder.0.1.weight torch.Size([64])
decoder.0.1.bias torch.Size([64])
decoder.0.2.weight torch.Size([64])
decoder.1.0.weight torch.Size([64, 64, 3, 2])
decoder.1.0.bias torch.Size([64])
decoder.1.1.weight torch.Size([64])
decoder.1.1.bias torch.Size([64])
decoder.1.2.weight torch.Size([64])
decoder.2.0.weight torch.Size([64, 64, 3, 2])
decoder.2.0.bias torch.Size([64])
decoder.2.1.weight torch.Size([64])
decoder.2.1.bias torch.Size([64])
decoder.2.2.weight torch.Size([64])
decoder.3.0.weight torch.Size([64, 64, 3, 2])
decoder.3.0.bias torch.Size([64])
decoder.3.1.weight torch.Size([64])
decoder.3.1.bias torch.Size([64])
decoder.3.2.weight torch.Size([64])
decoder.4.0.weight torch.Size([64, 5, 5, 2])
decoder.4.0.bias torch.Size([5])
decoder.4.1.weight torch.Size([5])
decoder.4.1.bias torch.Size([5])
decoder.4.2.weight torch.Size([5])
tcmlayer.0.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.0.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.0.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.1.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.1.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.2.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.2.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.3.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.3.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.4.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.4.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.0.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.0.TCMBlocks.5.out_conv.0.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.out_conv.1.weight torch.Size([64])
tcmlayer.0.TCMBlocks.5.out_conv.1.bias torch.Size([64])
tcmlayer.0.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.0.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.0.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.1.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.1.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.2.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.2.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.3.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.3.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.4.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.4.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.1.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.1.TCMBlocks.5.out_conv.0.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.out_conv.1.weight torch.Size([64])
tcmlayer.1.TCMBlocks.5.out_conv.1.bias torch.Size([64])
tcmlayer.1.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.0.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.0.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.1.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.1.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.2.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.2.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.3.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.3.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.4.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.4.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
tcmlayer.2.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
tcmlayer.2.TCMBlocks.5.out_conv.0.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.out_conv.1.weight torch.Size([64])
tcmlayer.2.TCMBlocks.5.out_conv.1.bias torch.Size([64])
tcmlayer.2.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
[*] Parameter Size: 1540884
==================================================================================================
fuck
======================================== Model Structures ========================================
SDDNet(
  (dnnet): DN_Net(
    (encoder): ModuleList(
      (0): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(1, 64, kernel_size=(5, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (1): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (2): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (3): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (4): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
    )
    (decoder): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (1): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (2): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (3): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (4): Sequential(
        (0): ConvTranspose2d(64, 5, kernel_size=(5, 2), stride=(2, 1))
        (1): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=5)
      )
    )
    (tcmlayer): ModuleList(
      (0): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
      (1): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
      (2): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
    )
  )
  (drnet): DN_Net(
    (encoder): ModuleList(
      (0): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(2, 64, kernel_size=(5, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (1): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (2): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (3): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
      (4): Sequential(
        (0): ConstantPad2d(padding=[1, 0, 0, 0], value=0)
        (1): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (3): PReLU(num_parameters=64)
      )
    )
    (decoder): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (1): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (2): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (3): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=64)
      )
      (4): Sequential(
        (0): ConvTranspose2d(64, 5, kernel_size=(5, 2), stride=(2, 1))
        (1): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): PReLU(num_parameters=5)
      )
    )
    (tcmlayer): ModuleList(
      (0): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
      (1): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
      (2): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=64)
              (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(64, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
    )
  )
  (srnet): SR_Net(
    (encoder): ModuleList(
      (0): Sequential(
        (0): RealConv2d(
          (conv): Conv2d(6, 64, kernel_size=(5, 2), stride=(2, 1))
        )
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (1): Sequential(
        (0): RealConv2d(
          (conv): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        )
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (2): Sequential(
        (0): RealConv2d(
          (conv): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        )
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (3): Sequential(
        (0): RealConv2d(
          (conv): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        )
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (4): Sequential(
        (0): RealConv2d(
          (conv): Conv2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        )
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
    )
    (real_decoder): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (1): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (2): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (3): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (4): Sequential(
        (0): ConvTranspose2d(64, 1, kernel_size=(5, 2), stride=(2, 1))
        (1): InstanceNorm2d(1, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
    )
    (imag_decoder): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (1): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (2): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (3): Sequential(
        (0): ConvTranspose2d(64, 64, kernel_size=(3, 2), stride=(2, 1))
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
      (4): Sequential(
        (0): ConvTranspose2d(64, 1, kernel_size=(5, 2), stride=(2, 1))
        (1): InstanceNorm2d(1, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): PReLU(num_parameters=1)
      )
    )
    (tcmlayer): ModuleList(
      (0): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
      (1): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
      (2): TcmBlocks(
        (TCMBlocks): ModuleList(
          (0): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (1): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (2): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (3): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[32, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[16, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (4): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[64, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(16,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[8, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
          (5): DMG_TCM(
            (conpress_conv): Conv1d(256, 64, kernel_size=(1,), stride=(1,), bias=False)
            (primal_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[128, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(32,), bias=False)
                (4): Sigmoid()
              )
            )
            (dual_domain): Gated_D_Conv(
              (main_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
              )
              (gate_conv): Sequential(
                (0): PReLU(num_parameters=64)
                (1): InstanceNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
                (2): ConstantPad1d(padding=[4, 0, 0, 0], value=0)
                (3): Conv1d(64, 64, kernel_size=(5,), stride=(1,), bias=False)
                (4): Sigmoid()
              )
            )
            (out_conv): Sequential(
              (0): PReLU(num_parameters=128)
              (1): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
            )
          )
        )
      )
    )
  )
  (stft): ConvSTFT()
  (istft): ConviSTFT()
)
==================================================================================================
======================================== Model Parameters ========================================
dnnet.encoder.0.1.weight torch.Size([64, 1, 5, 2])
dnnet.encoder.0.1.bias torch.Size([64])
dnnet.encoder.0.2.weight torch.Size([64])
dnnet.encoder.0.2.bias torch.Size([64])
dnnet.encoder.0.3.weight torch.Size([64])
dnnet.encoder.1.1.weight torch.Size([64, 64, 3, 2])
dnnet.encoder.1.1.bias torch.Size([64])
dnnet.encoder.1.2.weight torch.Size([64])
dnnet.encoder.1.2.bias torch.Size([64])
dnnet.encoder.1.3.weight torch.Size([64])
dnnet.encoder.2.1.weight torch.Size([64, 64, 3, 2])
dnnet.encoder.2.1.bias torch.Size([64])
dnnet.encoder.2.2.weight torch.Size([64])
dnnet.encoder.2.2.bias torch.Size([64])
dnnet.encoder.2.3.weight torch.Size([64])
dnnet.encoder.3.1.weight torch.Size([64, 64, 3, 2])
dnnet.encoder.3.1.bias torch.Size([64])
dnnet.encoder.3.2.weight torch.Size([64])
dnnet.encoder.3.2.bias torch.Size([64])
dnnet.encoder.3.3.weight torch.Size([64])
dnnet.encoder.4.1.weight torch.Size([64, 64, 3, 2])
dnnet.encoder.4.1.bias torch.Size([64])
dnnet.encoder.4.2.weight torch.Size([64])
dnnet.encoder.4.2.bias torch.Size([64])
dnnet.encoder.4.3.weight torch.Size([64])
dnnet.decoder.0.0.weight torch.Size([64, 64, 3, 2])
dnnet.decoder.0.0.bias torch.Size([64])
dnnet.decoder.0.1.weight torch.Size([64])
dnnet.decoder.0.1.bias torch.Size([64])
dnnet.decoder.0.2.weight torch.Size([64])
dnnet.decoder.1.0.weight torch.Size([64, 64, 3, 2])
dnnet.decoder.1.0.bias torch.Size([64])
dnnet.decoder.1.1.weight torch.Size([64])
dnnet.decoder.1.1.bias torch.Size([64])
dnnet.decoder.1.2.weight torch.Size([64])
dnnet.decoder.2.0.weight torch.Size([64, 64, 3, 2])
dnnet.decoder.2.0.bias torch.Size([64])
dnnet.decoder.2.1.weight torch.Size([64])
dnnet.decoder.2.1.bias torch.Size([64])
dnnet.decoder.2.2.weight torch.Size([64])
dnnet.decoder.3.0.weight torch.Size([64, 64, 3, 2])
dnnet.decoder.3.0.bias torch.Size([64])
dnnet.decoder.3.1.weight torch.Size([64])
dnnet.decoder.3.1.bias torch.Size([64])
dnnet.decoder.3.2.weight torch.Size([64])
dnnet.decoder.4.0.weight torch.Size([64, 5, 5, 2])
dnnet.decoder.4.0.bias torch.Size([5])
dnnet.decoder.4.1.weight torch.Size([5])
dnnet.decoder.4.1.bias torch.Size([5])
dnnet.decoder.4.2.weight torch.Size([5])
dnnet.tcmlayer.0.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.0.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.0.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.1.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.0.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.2.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.0.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.3.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.0.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.4.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.0.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.0.TCMBlocks.5.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.0.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.1.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.0.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.1.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.1.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.1.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.2.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.1.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.3.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.1.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.4.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.1.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.1.TCMBlocks.5.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.1.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.2.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.0.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.2.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.1.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.2.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.2.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.2.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.3.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.2.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.4.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
dnnet.tcmlayer.2.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
dnnet.tcmlayer.2.TCMBlocks.5.out_conv.0.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.out_conv.1.weight torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.out_conv.1.bias torch.Size([64])
dnnet.tcmlayer.2.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
drnet.encoder.0.1.weight torch.Size([64, 2, 5, 2])
drnet.encoder.0.1.bias torch.Size([64])
drnet.encoder.0.2.weight torch.Size([64])
drnet.encoder.0.2.bias torch.Size([64])
drnet.encoder.0.3.weight torch.Size([64])
drnet.encoder.1.1.weight torch.Size([64, 64, 3, 2])
drnet.encoder.1.1.bias torch.Size([64])
drnet.encoder.1.2.weight torch.Size([64])
drnet.encoder.1.2.bias torch.Size([64])
drnet.encoder.1.3.weight torch.Size([64])
drnet.encoder.2.1.weight torch.Size([64, 64, 3, 2])
drnet.encoder.2.1.bias torch.Size([64])
drnet.encoder.2.2.weight torch.Size([64])
drnet.encoder.2.2.bias torch.Size([64])
drnet.encoder.2.3.weight torch.Size([64])
drnet.encoder.3.1.weight torch.Size([64, 64, 3, 2])
drnet.encoder.3.1.bias torch.Size([64])
drnet.encoder.3.2.weight torch.Size([64])
drnet.encoder.3.2.bias torch.Size([64])
drnet.encoder.3.3.weight torch.Size([64])
drnet.encoder.4.1.weight torch.Size([64, 64, 3, 2])
drnet.encoder.4.1.bias torch.Size([64])
drnet.encoder.4.2.weight torch.Size([64])
drnet.encoder.4.2.bias torch.Size([64])
drnet.encoder.4.3.weight torch.Size([64])
drnet.decoder.0.0.weight torch.Size([64, 64, 3, 2])
drnet.decoder.0.0.bias torch.Size([64])
drnet.decoder.0.1.weight torch.Size([64])
drnet.decoder.0.1.bias torch.Size([64])
drnet.decoder.0.2.weight torch.Size([64])
drnet.decoder.1.0.weight torch.Size([64, 64, 3, 2])
drnet.decoder.1.0.bias torch.Size([64])
drnet.decoder.1.1.weight torch.Size([64])
drnet.decoder.1.1.bias torch.Size([64])
drnet.decoder.1.2.weight torch.Size([64])
drnet.decoder.2.0.weight torch.Size([64, 64, 3, 2])
drnet.decoder.2.0.bias torch.Size([64])
drnet.decoder.2.1.weight torch.Size([64])
drnet.decoder.2.1.bias torch.Size([64])
drnet.decoder.2.2.weight torch.Size([64])
drnet.decoder.3.0.weight torch.Size([64, 64, 3, 2])
drnet.decoder.3.0.bias torch.Size([64])
drnet.decoder.3.1.weight torch.Size([64])
drnet.decoder.3.1.bias torch.Size([64])
drnet.decoder.3.2.weight torch.Size([64])
drnet.decoder.4.0.weight torch.Size([64, 5, 5, 2])
drnet.decoder.4.0.bias torch.Size([5])
drnet.decoder.4.1.weight torch.Size([5])
drnet.decoder.4.1.bias torch.Size([5])
drnet.decoder.4.2.weight torch.Size([5])
drnet.tcmlayer.0.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.0.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.0.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.1.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.0.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.2.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.0.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.3.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.0.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.4.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.0.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.0.TCMBlocks.5.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.0.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.1.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.0.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.1.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.1.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.1.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.2.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.1.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.3.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.1.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.4.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.1.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.1.TCMBlocks.5.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.1.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.2.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.0.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.0.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.2.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.1.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.1.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.2.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.2.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.2.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.2.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.3.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.3.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.2.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.4.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.4.out_conv.2.weight torch.Size([256, 64, 1])
drnet.tcmlayer.2.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
drnet.tcmlayer.2.TCMBlocks.5.out_conv.0.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.out_conv.1.weight torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.out_conv.1.bias torch.Size([64])
drnet.tcmlayer.2.TCMBlocks.5.out_conv.2.weight torch.Size([256, 64, 1])
srnet.encoder.0.0.conv.weight torch.Size([64, 6, 5, 2])
srnet.encoder.0.0.conv.bias torch.Size([64])
srnet.encoder.0.2.weight torch.Size([1])
srnet.encoder.1.0.conv.weight torch.Size([64, 64, 3, 2])
srnet.encoder.1.0.conv.bias torch.Size([64])
srnet.encoder.1.2.weight torch.Size([1])
srnet.encoder.2.0.conv.weight torch.Size([64, 64, 3, 2])
srnet.encoder.2.0.conv.bias torch.Size([64])
srnet.encoder.2.2.weight torch.Size([1])
srnet.encoder.3.0.conv.weight torch.Size([64, 64, 3, 2])
srnet.encoder.3.0.conv.bias torch.Size([64])
srnet.encoder.3.2.weight torch.Size([1])
srnet.encoder.4.0.conv.weight torch.Size([64, 64, 3, 2])
srnet.encoder.4.0.conv.bias torch.Size([64])
srnet.encoder.4.2.weight torch.Size([1])
srnet.real_decoder.0.0.weight torch.Size([64, 64, 3, 2])
srnet.real_decoder.0.0.bias torch.Size([64])
srnet.real_decoder.0.2.weight torch.Size([1])
srnet.real_decoder.1.0.weight torch.Size([64, 64, 3, 2])
srnet.real_decoder.1.0.bias torch.Size([64])
srnet.real_decoder.1.2.weight torch.Size([1])
srnet.real_decoder.2.0.weight torch.Size([64, 64, 3, 2])
srnet.real_decoder.2.0.bias torch.Size([64])
srnet.real_decoder.2.2.weight torch.Size([1])
srnet.real_decoder.3.0.weight torch.Size([64, 64, 3, 2])
srnet.real_decoder.3.0.bias torch.Size([64])
srnet.real_decoder.3.2.weight torch.Size([1])
srnet.real_decoder.4.0.weight torch.Size([64, 1, 5, 2])
srnet.real_decoder.4.0.bias torch.Size([1])
srnet.real_decoder.4.2.weight torch.Size([1])
srnet.imag_decoder.0.0.weight torch.Size([64, 64, 3, 2])
srnet.imag_decoder.0.0.bias torch.Size([64])
srnet.imag_decoder.0.2.weight torch.Size([1])
srnet.imag_decoder.1.0.weight torch.Size([64, 64, 3, 2])
srnet.imag_decoder.1.0.bias torch.Size([64])
srnet.imag_decoder.1.2.weight torch.Size([1])
srnet.imag_decoder.2.0.weight torch.Size([64, 64, 3, 2])
srnet.imag_decoder.2.0.bias torch.Size([64])
srnet.imag_decoder.2.2.weight torch.Size([1])
srnet.imag_decoder.3.0.weight torch.Size([64, 64, 3, 2])
srnet.imag_decoder.3.0.bias torch.Size([64])
srnet.imag_decoder.3.2.weight torch.Size([1])
srnet.imag_decoder.4.0.weight torch.Size([64, 1, 5, 2])
srnet.imag_decoder.4.0.bias torch.Size([1])
srnet.imag_decoder.4.2.weight torch.Size([1])
srnet.tcmlayer.0.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.0.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.0.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.0.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.0.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.0.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.0.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.1.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.1.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.1.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.1.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.1.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.0.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.2.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.2.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.2.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.2.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.2.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.0.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.3.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.3.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.3.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.3.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.3.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.0.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.4.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.4.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.4.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.4.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.4.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.0.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.0.TCMBlocks.5.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.0.TCMBlocks.5.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.5.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.5.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.0.TCMBlocks.5.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.1.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.0.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.0.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.0.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.0.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.0.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.1.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.1.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.1.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.1.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.1.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.1.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.1.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.2.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.2.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.2.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.2.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.2.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.1.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.3.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.3.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.3.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.3.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.3.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.1.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.4.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.4.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.4.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.4.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.4.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.1.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.1.TCMBlocks.5.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.1.TCMBlocks.5.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.5.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.5.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.1.TCMBlocks.5.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.2.TCMBlocks.0.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.0.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.0.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.0.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.0.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.0.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.2.TCMBlocks.1.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.1.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.1.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.1.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.1.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.1.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.2.TCMBlocks.2.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.2.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.2.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.2.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.2.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.2.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.2.TCMBlocks.3.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.3.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.3.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.3.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.3.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.3.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.2.TCMBlocks.4.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.4.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.4.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.4.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.4.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.4.out_conv.2.weight torch.Size([256, 128, 1])
srnet.tcmlayer.2.TCMBlocks.5.conpress_conv.weight torch.Size([64, 256, 1])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.primal_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.main_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.main_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.main_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.main_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.gate_conv.0.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.gate_conv.1.weight torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.gate_conv.1.bias torch.Size([64])
srnet.tcmlayer.2.TCMBlocks.5.dual_domain.gate_conv.3.weight torch.Size([64, 64, 5])
srnet.tcmlayer.2.TCMBlocks.5.out_conv.0.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.5.out_conv.1.weight torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.5.out_conv.1.bias torch.Size([128])
srnet.tcmlayer.2.TCMBlocks.5.out_conv.2.weight torch.Size([256, 128, 1])
[*] Parameter Size: 5762041
==================================================================================================
fuck
fuck
fuck
tensor(17.4801, grad_fn=<AddBackward0>)
